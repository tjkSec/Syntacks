{
  "_args": [
    [
      {
        "raw": "stylis@^2.0.4",
        "scope": null,
        "escapedName": "stylis",
        "name": "stylis",
        "rawSpec": "^2.0.4",
        "spec": ">=2.0.4 <3.0.0",
        "type": "range"
      },
      "/home/trent/Desktop/syntacks/node_modules/css-to-object"
    ]
  ],
  "_from": "stylis@>=2.0.4 <3.0.0",
  "_id": "stylis@2.0.12",
  "_inCache": true,
  "_location": "/stylis",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stylis-2.0.12.tgz_1495134654500_0.5545616210438311"
  },
  "_npmUser": {
    "name": "thysultan",
    "email": "sultantarimo@me.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stylis@^2.0.4",
    "scope": null,
    "escapedName": "stylis",
    "name": "stylis",
    "rawSpec": "^2.0.4",
    "spec": ">=2.0.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/css-to-object"
  ],
  "_resolved": "https://registry.npmjs.org/stylis/-/stylis-2.0.12.tgz",
  "_shasum": "547253055d170f2a7ac2f6d09365d70635f2bec6",
  "_shrinkwrap": null,
  "_spec": "stylis@^2.0.4",
  "_where": "/home/trent/Desktop/syntacks/node_modules/css-to-object",
  "author": {
    "name": "Sultan Tarimo",
    "email": "sultantarimo@me.com"
  },
  "bugs": {
    "url": "https://github.com/thysultan/stylis.js/issues"
  },
  "dependencies": {},
  "description": "stylis is a feature-rich css preprocessor",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "547253055d170f2a7ac2f6d09365d70635f2bec6",
    "tarball": "https://registry.npmjs.org/stylis/-/stylis-2.0.12.tgz"
  },
  "files": [
    "stylis.js",
    "stylis.min.js"
  ],
  "gitHead": "4db2e03781acead102ce997e2a23db56f545ec33",
  "homepage": "https://github.com/thysultan/stylis.js",
  "keywords": [
    "preprocessor",
    "parser",
    "prefixer",
    "css",
    "node",
    "browser"
  ],
  "license": "MIT",
  "main": "stylis.js",
  "maintainers": [
    {
      "name": "thysultan",
      "email": "sultantarimo@me.com"
    }
  ],
  "name": "stylis",
  "optionalDependencies": {},
  "readme": "# STYLIS\n\n[![stylis](https://stylis.js.org/assets/logo.svg)](https://github.com/thysultan/stylis.js)\n\nstylis is a feature-rich css preprocessor\n\n- ~3Kb\n\n[![npm](https://img.shields.io/npm/v/stylis.svg?style=flat)](https://www.npmjs.com/package/stylis) [![licence](https://img.shields.io/badge/licence-MIT-blue.svg?style=flat)](https://github.com/thysultan/stylis.js/blob/master/LICENSE.md) [![Build Status](https://semaphoreci.com/api/v1/thysultan/stylis-js/branches/master/shields_badge.svg)](https://semaphoreci.com/thysultan/stylis-js) ![dependencies](https://img.shields.io/badge/dependencies-none-green.svg?style=flat)\n\n## Supports\n\n* Edge\n* IE 8+\n* Chrome\n* Firefox\n* Safari\n* Node\n\n---\n\n## Installation\n\n#### direct download\n\n```html\n<script src=stylis.min.js></script>\n```\n\n#### CDN\n\n\n```html\n<script src=https://unpkg.com/stylis@2.0.12/stylis.min.js></script>\n```\n\n#### npm\n\n```\nnpm install stylis --save\n```\n\n## Features\n\n- web component emulation of `:host`, `:host()` and `:host-context()`\n- namespacing\n- inline global injection via `:global(selector)`\n- nesting `a { &:hover {} }`\n- prefixer (flex-box, etc...)\n- flat css `color: red; h1 { color: red; }`\n- middleware support\n- keyframes and animation namespacing\n\n---\n\nstylis is a feature-rich css preprocessor that turns this\n\n```javascript\nstylis('#user', styles);\n```\n\nWhere `styles` is the following css\n\n```scss\n// flat css\nfont-size: 2em;\nfont-family: sans-serif;\n\n// emulation of shadow dom selectors\n:host {\n    color: red;\n}\n\n:host(.fancy) {\n    color: red;\n}\n\n:host-context(body) {\n    color: red;\n}\n\n// removes line comment\n\n.name {\n    transform: rotate(30deg);\n}\n\n// inject to global scope block\n@global {\n    body {\n        background: yellow;\n    }\n}\n\n// inject to global scope inline\n:global(h2),\nh2 &\n{\n\tcolor:red;\n\n\t/**\n\t * removes block comments\n\t */\n}\n\n// prefixing\n& {\n\tanimation: slidein 3s ease infinite;\n    display: flex;\n    flex: 1;\n    user-select: none;\n}\n\n// namespaced animations\n&:before {\n\tanimation: slidein 3s ease infinite;\n}\n\n// namespaced keyframes\n@keyframes slidein {\n\tfrom { transform: translate(10px); }\n\tto { transform: translate(200px); }\n}\n\n// flat namespaced css in @media\n@media (max-width: 600px) {\n    display: block;\n\n\t&, h1 {\n        appearance: none;\n    }\n}\n\n// nesting\nh1 {\n    color: red;\n\n    h2 {\n        display: block;\n\n        h3, &:hover {\n            color: blue;\n        }\n    }\n\n    font-size: 12px;\n}\n```\n\ninto this (minus the whitespace)\n\n```css\n#user {\n\tfont-size: 2em;\n\tfont-family: sans-serif;\n    width: 20px;\n}\n#user {\n    color: red;\n}\n#user.fancy {\n    color: red;\n}\nbody #user {\n    color: red;\n}\n#user .name {\n    -webkit-transform: rotate(30deg);\n    -ms-transform: rotate(30deg);\n    transform: rotate(30deg);\n}\nbody {\n    background: yellow;\n}\n\nh2,\nh2 {\n    color: red;\n}\n#user {\n    display: -webkit-flex;\n    display: flex;\n\n    -webkit-flex: 1;\n    -moz-flex: 1;\n    flex: 1;\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    -webkit-animation: userslidein 3s ease infinite;\n    animation: userslidein 3s ease infinite;\n}\n#user:before {\n    -webkit-animation: userslidein 3s ease infinite;\n    animation: userslidein 3s ease infinite;\n}\n@-webkit-keyframes userslidein {\n    from {\n        -webkit-transform: translate(10px);\n        -ms-transform: translate(10px);\n        transform: translate(10px);\n    }\n    to {\n        -webkit-transform: translate(200px);\n        -ms-transform: translate(200px);\n        transform: translate(200px);\n    }\n}\n@keyframes userslidein {\n    from {\n        -webkit-transform: translate(10px);\n        -ms-transform: translate(10px);\n        transform: translate(10px);\n    }\n    to {\n        -webkit-transform: translate(200px);\n        -ms-transform: translate(200px);\n        transform: translate(200px);\n    }\n}\n@media (max-width: 600px) {\n    #user, #user h1 {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n    }\n\n    #user {\n        display: block;\n    }\n}\n\n#user h1 {\n    color: red;\n    font-size: 12px;\n}\n\n#user h1 h2 {\n    display: block;\n}\n\n#user h1 h2 h3,\n#user h1 h2 h2:hover {\n    color: blue;\n}\n```\n\n## API\n\n```javascript\nstylis(\n    selector: {string},     // selector - i.e `.class` or `#id` or `[attr=id]`\n    styles: {string},       // css string\n    animations: {boolean=}  // false to prevent prefixing animations, true by default\n    compact: {boolean=}     // enable additional features(:global, :host, :host-context)\n    middleware: {function|function[]=}\n);\n\nstylis.use(middleware: {function|function[]=})\n```\n\n## Middleware\n\nThe optional middleware function accepts four arguments `ctx, str, line, column, namespace, length`, the middleware is executed at 8 stages.\n\n1. before the compiler starts `ctx = 0`, you can use this to do any linting/transforms before compiling\n2. at every selector declaration pre-processed `ctx = 1` i.e `.class` / `.foo, .bar`\n3. at every selector post-processed `ctx = 1.5` i.e `.prefix.foo`\n4. at every property declaration `ctx = 2` i.e `color: red;`\n5. before a block of compiled css is added to the output string `ctx = 3`, i.e `.class {color:red;}`\n6. before a block of flat compiled css is added to the output string `ctx = 4`, i.e `color:blue;`\n8. before the compiled css output is returned `ctx = 6`\n9. after every new line that does not end with a token `ctx = 7`\n\nIf at any context point the middleware returns a non-falsey value the token or block of css will be replaced with the return value. For example we can add a feature `random()` that when used prints a random number.\n\n```javascript\nstylis(``, `h1 { width: calc(random()*10); }`, false, function (ctx, str, line, column, namespace, length) {\n    switch (ctx) {\n        // 2: property declaration, str will be `width: calc(random()*10);`\n        case 2: return str.replace(/random\\(\\)/g, Math.random());\n    }\n});\n```\n\nWill replace all instances of `random()` with a random number.\n\n### Extending css syntax with function\n\nAs you can tell from the above middleware it is possible to extend css's syntax. In the previous example we used a function as middleware which allows for much lower level access and control but we could as well use an object of functions that define what different function in the css will generate. For example a `random()` and `darken(value)` extension can look like\n\n```javascript\nstylis(``, `\n        h1 {\n            width: calc(random()*10);\n            color: darken(#FFF);\n        }\n`, false, {\n    random () {\n        return Math.random();\n    }\n    darken (value) {\n        return '#000';\n    }\n});\n```\n\nIf we had used `darken(#FFF, #CCC)` in our css the two arguments would have been passed to the darken function.\n\nThe same can be done with `stylis.use` to register middleware individually, and `stylis.plugins.length = 0` to flush all middleware.\n\n\n## Integration\n\nYou can use stylis to build an abstraction on top of, for example imagine we want to build an abstract that makes the following React Component possible\n\n```javascript\nclass Heading extends React.Component {\n    stylesheet(){\n        return `\n            &{\n                color: blue\n            }\n        `;\n    }\n    render() {\n        return (\n            React.createElement('h1', 'Hello World')\n        );\n    }\n}\n```\n\nWe could simply extend the Component class as follows\n\n```javascript\nReact.Component.prototype.stylis = function (self) {\n    var namespace = this.displayName;\n\n    return function () {\n        var style = document.createElement('style');\n        style.textContent = stylis(namespace, self.stylesheet());\n        document.head.appendChild(style);\n        mounted = true;\n        this.setAttribute(namespace);\n    }\n}\n```\n\nThen use it in the following way\n\n```javascript\nclass Heading extends React.Component {\n    stylesheet(){\n        return `\n            &{\n                color: blue\n            }\n        `;\n    }\n    render() {\n        return (\n            React.createElement('h1', {ref: this.stylis(self)}, 'Hello World')\n        );\n    }\n}\n```\n\nWhen the first instance of the component is mounted the function assigned to the ref will get executed adding a style element with the compiled output of `stylesheet()`\nwhere as only the namespace attribute is added to any subsequent instances.\n\nYou can of course do this another way\n\n```javascript\nclass Heading extends React.Component {\n    constructor (props) {\n        super(props);\n        // or you can even inline this\n        this.style = React.createElement('style', {id: this.displayName}, this.stylesheet());\n    }\n    stylesheet(){\n        return `\n            &{\n                color: blue\n            }\n        `;\n    }\n    render() {\n        return (\n            React.createElement('h1', null, 'Hello World', this.style)\n        );\n    }\n}\n```\n\nOne will add it to the head another will render it in place with the component.\n\nIf you want a better picture into what can be done, there is an abstraction I created\nfor [dio.js](https://github.com/thysultan/dio.js) that does away with the above boilerplate entirely [http://jsbin.com/mozefe/1/edit?js,output](http://jsbin.com/mozefe/1/edit?js,output)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thysultan/stylis.js.git"
  },
  "scripts": {
    "test": "node ./tests"
  },
  "version": "2.0.12"
}
