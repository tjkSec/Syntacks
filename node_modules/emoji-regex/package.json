{
  "_args": [
    [
      {
        "raw": "emoji-regex@^6.1.0",
        "scope": null,
        "escapedName": "emoji-regex",
        "name": "emoji-regex",
        "rawSpec": "^6.1.0",
        "spec": ">=6.1.0 <7.0.0",
        "type": "range"
      },
      "/home/trent/Desktop/syntacks/node_modules/eslint-plugin-jsx-a11y"
    ]
  ],
  "_from": "emoji-regex@>=6.1.0 <7.0.0",
  "_id": "emoji-regex@6.4.3",
  "_inCache": true,
  "_location": "/emoji-regex",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/emoji-regex-6.4.3.tgz_1498985721035_0.18083568243309855"
  },
  "_npmUser": {
    "name": "mathias",
    "email": "mathias@qiwi.be"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "emoji-regex@^6.1.0",
    "scope": null,
    "escapedName": "emoji-regex",
    "name": "emoji-regex",
    "rawSpec": "^6.1.0",
    "spec": ">=6.1.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-plugin-jsx-a11y"
  ],
  "_resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-6.4.3.tgz",
  "_shasum": "6ac2ac58d4b78def5e39b33fcbf395688af3076c",
  "_shrinkwrap": null,
  "_spec": "emoji-regex@^6.1.0",
  "_where": "/home/trent/Desktop/syntacks/node_modules/eslint-plugin-jsx-a11y",
  "author": {
    "name": "Mathias Bynens",
    "url": "https://mathiasbynens.be/"
  },
  "bugs": {
    "url": "https://github.com/mathiasbynens/emoji-regex/issues"
  },
  "dependencies": {},
  "description": "A regular expression to match all Emoji-only symbols as per the Unicode Standard.",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.25.0",
    "babel-plugin-transform-unicode-property-regex": "^2.0.2",
    "babel-preset-env": "^1.5.2",
    "mocha": "^3.4.2",
    "regexgen": "^1.2.4",
    "unicode-tr51": "^8.1.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-VyrhS7duUGY+mBDRobQtGYP+wArX2HU0FHcP/JrGUtVPf824eCDrUTe7ZQ7iWIkzdL772ZWU0NUig/pDaVeIVQ==",
    "shasum": "6ac2ac58d4b78def5e39b33fcbf395688af3076c",
    "tarball": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-6.4.3.tgz"
  },
  "files": [
    "LICENSE-MIT.txt",
    "index.js",
    "text.js"
  ],
  "gitHead": "e784cef2e3c18855d521a37f4a9e8a813870f0a6",
  "homepage": "https://mths.be/emoji-regex",
  "keywords": [
    "unicode",
    "regex",
    "regexp",
    "regular expressions",
    "code points",
    "symbols",
    "characters",
    "emoji"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mathias",
      "email": "mathias@qiwi.be"
    }
  ],
  "name": "emoji-regex",
  "optionalDependencies": {},
  "readme": "# emoji-regex [![Build status](https://travis-ci.org/mathiasbynens/emoji-regex.svg?branch=master)](https://travis-ci.org/mathiasbynens/emoji-regex)\n\n_emoji-regex_ offers a regular expression to match all emoji symbols (including textual representations of emoji) as per the Unicode Standard.\n\nThis repository contains a script that generates this regular expression based on [the data from Unicode Technical Report #51](https://github.com/mathiasbynens/unicode-tr51). Because of this, the regular expression can easily be updated whenever new emoji are added to the Unicode standard.\n\n## Installation\n\nVia [npm](https://www.npmjs.com/):\n\n```bash\nnpm install emoji-regex\n```\n\nIn [Node.js](https://nodejs.org/):\n\n```js\nconst emojiRegex = require('emoji-regex');\n// Note: because the regular expression has the global flag set, this module\n// exports a function that returns the regex rather than exporting the regular\n// expression itself, to make it impossible to (accidentally) mutate the\n// original regular expression.\n\nconst text = `\n\\u{231A}: ⌚ default emoji presentation character (Emoji_Presentation)\n\\u{2194}\\u{FE0F}: ↔️ default text presentation character rendered as emoji\n\\u{1F469}: 👩 emoji modifier base (Emoji_Modifier_Base)\n\\u{1F469}\\u{1F3FF}: 👩🏿 emoji modifier base followed by a modifier\n`;\n\nconst regex = emojiRegex();\nlet match;\nwhile (match = regex.exec(text)) {\n  const emoji = match[0];\n  console.log(`Matched sequence ${ emoji } — code points: ${ [...emoji].length }`);\n}\n```\n\nConsole output:\n\n```\nMatched sequence ⌚ — code points: 1\nMatched sequence ⌚ — code points: 1\nMatched sequence ↔️ — code points: 2\nMatched sequence ↔️ — code points: 2\nMatched sequence 👩 — code points: 1\nMatched sequence 👩 — code points: 1\nMatched sequence 👩🏿 — code points: 2\nMatched sequence 👩🏿 — code points: 2\n```\n\nTo match emoji in their textual representation as well (i.e. emoji that are not `Emoji_Presentation` symbols and that aren’t forced to render as emoji by a variation selector), `require` the other regex:\n\n```js\nconst emojiRegex = require('emoji-regex/text.js');\n```\n\n## Author\n\n| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](https://mathiasbynens.be/) |\n\n## License\n\n_emoji-regex_ is available under the [MIT](https://mths.be/mit) license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mathiasbynens/emoji-regex.git"
  },
  "scripts": {
    "build": "babel src -d .; node script/inject-sequences.js",
    "clean": "rm -f -- index.js text.js",
    "prepublish": "npm run clean && npm run build",
    "test": "npm run build && mocha",
    "test:watch": "npm run test -- --watch"
  },
  "version": "6.4.3"
}
